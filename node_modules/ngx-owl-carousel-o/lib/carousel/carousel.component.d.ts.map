{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnDestroy, QueryList, TemplateRef, ElementRef, AfterContentInit, EventEmitter, ChangeDetectorRef, OnChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ResizeService } from '../services/resize.service';\nimport { CarouselService } from '../services/carousel.service';\nimport { StageData } from \"../models/stage-data.model\";\nimport { OwlDOMData } from \"../models/owlDOM-data.model\";\nimport { SlideModel } from '../models/slide.model';\nimport { OwlOptions } from '../models/owl-options.model';\nimport { NavData, DotsData } from '../models/navigation-data.models';\nimport { NavigationService } from '../services/navigation.service';\nimport { AutoplayService } from '../services/autoplay.service';\nimport { LazyLoadService } from '../services/lazyload.service';\nimport { AnimateService } from '../services/animate.service';\nimport { AutoHeightService } from '../services/autoheight.service';\nimport { HashService } from '../services/hash.service';\nimport { OwlLogger } from '../services/logger.service';\nexport declare class CarouselSlideDirective {\n    tplRef: TemplateRef<any>;\n    /**\n     * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n     * Will be auto-generated if not provided.\n     */\n    id: string;\n    /**\n     * Defines how much widths of common slide will current slide have\n     * e.g. if _mergeData=2, the slide will twice wider then slides with _mergeData=1\n     */\n    private _dataMerge;\n    set dataMerge(data: number);\n    get dataMerge(): number;\n    /**\n     * Width of slide\n     */\n    width: number;\n    /**\n     * Inner content of dot for certain slide; can be html-markup\n     */\n    dotContent: string;\n    /**\n     * Hash (fragment) of url which corresponds to certain slide\n     */\n    dataHash: string;\n    constructor(tplRef: TemplateRef<any>);\n    /**\n       * Determines if the input is a Number or something that can be coerced to a Number\n       * @param - The input to be tested\n       * @returns - An indication if the input is a Number or can be coerced to a Number\n       */\n    isNumeric(number: any): boolean;\n}\n/**\n * Data which will be passed out after ending of transition of carousel\n */\nexport declare class SlidesOutputData {\n    startPosition?: number;\n    slides?: SlideModel[];\n}\nexport declare class CarouselComponent implements OnInit, AfterContentInit, OnDestroy, OnChanges {\n    private el;\n    private resizeService;\n    private carouselService;\n    private navigationService;\n    private autoplayService;\n    private lazyLoadService;\n    private animateService;\n    private autoHeightService;\n    private hashService;\n    private logger;\n    private changeDetectorRef;\n    slides: QueryList<CarouselSlideDirective>;\n    translated: EventEmitter<SlidesOutputData>;\n    dragging: EventEmitter<{\n        dragging: boolean;\n        data: SlidesOutputData;\n    }>;\n    change: EventEmitter<SlidesOutputData>;\n    changed: EventEmitter<SlidesOutputData>;\n    initialized: EventEmitter<SlidesOutputData>;\n    /**\n     * Width of carousel window (tag with class .owl-carousel), in wich we can see moving sliders\n     */\n    carouselWindowWidth: number;\n    /**\n     * Subscription to 'resize' event\n     */\n    resizeSubscription: Subscription;\n    /**\n     * Subscription merge Observable, which merges all Observables in the component except 'resize' Observable and this.slides.changes()\n     */\n    private _allObservSubscription;\n    /**\n     * Subscription to `this.slides.changes().\n     * It could be included in 'this._allObservSubscription', but that subcription get created during the initializing of component\n     * and 'this.slides' are undefined at that moment. So it's needed to wait for initialization of content.\n     */\n    private _slidesChangesSubscription;\n    /**\n     * Current settings for the carousel.\n     */\n    owlDOMData: OwlDOMData;\n    /**\n     * Data of owl-stage\n     */\n    stageData: StageData;\n    /**\n       *  Data of every slide\n       */\n    slidesData: SlideModel[];\n    /**\n       * Data of navigation block\n       */\n    navData: NavData;\n    /**\n     * Data of dots block\n     */\n    dotsData: DotsData;\n    /**\n     * Data, wich are passed out of carousel after ending of transioning of carousel\n     */\n    slidesOutputData: SlidesOutputData;\n    /**\n     * Shows whether carousel is loaded of not.\n     */\n    carouselLoaded: boolean;\n    /**\n     * User's options\n     */\n    options: OwlOptions;\n    prevOptions: OwlOptions;\n    /**\n     * Observable for getting current View Settings\n     */\n    private _viewCurSettings$;\n    /**\n     * Observable for catching the end of transition of carousel\n     */\n    private _translatedCarousel$;\n    /**\n     * Observable for catching the start of dragging of the carousel\n     */\n    private _draggingCarousel$;\n    /**\n     * Observable for catching the start of changing of the carousel\n     */\n    private _changeCarousel$;\n    /**\n     * Observable for catching the moment when the data about slides changed, more exactly when the position changed.\n     */\n    private _changedCarousel$;\n    /**\n     * Observable for catching the initialization of changing the carousel\n     */\n    private _initializedCarousel$;\n    /**\n     * Observable for merging all Observables and creating one subscription\n     */\n    private _carouselMerge$;\n    private docRef;\n    constructor(el: ElementRef, resizeService: ResizeService, carouselService: CarouselService, navigationService: NavigationService, autoplayService: AutoplayService, lazyLoadService: LazyLoadService, animateService: AnimateService, autoHeightService: AutoHeightService, hashService: HashService, logger: OwlLogger, changeDetectorRef: ChangeDetectorRef, docRef: any);\n    onVisibilityChange(ev: any): void;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Joins the observable login in one place: sets values to some observables, merges this observables and\n     * subcribes to merge func\n     */\n    spyDataStreams(): void;\n    /**\n     * Init subscription to resize event and attaches handler for this event\n     */\n    private _winResizeWatcher;\n    /**\n     * Handler for transitioend event\n     */\n    onTransitionEnd(): void;\n    /**\n     * Handler for click event, attached to next button\n     */\n    next(): void;\n    /**\n     * Handler for click event, attached to prev button\n     */\n    prev(): void;\n    /**\n     * Handler for click event, attached to dots\n     */\n    moveByDot(dotId: string): void;\n    /**\n     * rewinds carousel to slide with needed id\n     * @param id fragment of url\n     */\n    to(id: string): void;\n    /**\n     * Gathers and prepares data intended for passing to the user by means of firing event translatedCarousel\n     */\n    gatherTranslatedData(): void;\n    /**\n     * Starts pausing\n     */\n    startPausing(): void;\n    /**\n     * Starts playing after mouse leaves carousel\n     */\n    startPlayML(): void;\n    /**\n     * Starts playing after touch ends\n     */\n    startPlayTE(): void;\n    stopAutoplay(): void;\n    startAutoplay(): void;\n}\n"]}