{"version":3,"file":"stage.component.d.ts","sources":["stage.component.d.ts"],"names":[],"mappingssourcesContent":["import { NgZone, ElementRef, Renderer2, OnInit, OnDestroy } from '@angular/core';\nimport { CarouselService } from '../../services/carousel.service';\nimport { StageData } from '../../models/stage-data.model';\nimport { SlideModel } from '../../models/slide.model';\nimport { AnimateService } from '../../services/animate.service';\nexport declare class StageComponent implements OnInit, OnDestroy {\n    private zone;\n    private el;\n    private renderer;\n    private carouselService;\n    private animateService;\n    /**\n     * Object with settings which make carousel draggable by touch or mouse\n     */\n    owlDraggable: {\n        isMouseDragable: boolean;\n        isTouchDragable: boolean;\n    };\n    /**\n     * Data of owl-stage\n     */\n    stageData: StageData;\n    /**\n     *  Data of every slide\n     */\n    slidesData: SlideModel[];\n    /**\n     * Function wich will be returned after attaching listener to 'mousemove' event\n     */\n    listenerMouseMove: () => void;\n    /**\n     * Function wich will be returned after attaching listener to 'touchmove' event\n     */\n    listenerTouchMove: () => void;\n    /**\n     * Function wich will be returned after attaching listener to 'mousemove' event\n     */\n    listenerOneMouseMove: () => void;\n    /**\n     * Function wich will be returned after attaching listener to 'touchmove' event\n     */\n    listenerOneTouchMove: () => void;\n    /**\n     * Function wich will be returned after attaching listener to 'mouseup' event\n     */\n    listenerMouseUp: () => void;\n    /**\n     * Function wich will be returned after attaching listener to 'touchend' event\n     */\n    listenerTouchEnd: () => void;\n    /**\n     * Function wich will be returned after attaching listener to 'click' event\n     */\n    listenerOneClick: () => void;\n    listenerATag: () => void;\n    /**\n     * Object with data needed for dragging\n     */\n    private _drag;\n    /**\n     * Subject for notification when the carousel's rebuilding caused by resize event starts\n     */\n    private _oneDragMove$;\n    /**\n     * Subsctiption to _oneDragMove$ Subject\n     */\n    private _oneMoveSubsription;\n    preparePublicSlide: (slide: SlideModel) => SlideModel;\n    constructor(zone: NgZone, el: ElementRef, renderer: Renderer2, carouselService: CarouselService, animateService: AnimateService);\n    onMouseDown(event: any): void;\n    onTouchStart(event: any): boolean;\n    onTouchCancel(event: any): void;\n    onDragStart(): boolean;\n    onSelectStart(): boolean;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Passes this to _oneMouseTouchMove();\n     */\n    bindOneMouseTouchMove: (ev: any) => void;\n    /**\n     * Passes this to _onDragMove();\n     */\n    bindOnDragMove: (ev: any) => void;\n    /**\n     * Passes this to _onDragMove();\n     */\n    bindOnDragEnd: (ev: any) => void;\n    /**\n       * Handles `touchstart` and `mousedown` events.\n       * @todo Horizontal swipe threshold as option\n       * @todo #261\n       * @param event - The event arguments.\n       */\n    private _onDragStart;\n    /**\n     * Attaches listeners to `touchmove` and `mousemove` events; initiates updating carousel after starting dragging\n     * @param event event objech of mouse or touch event\n     */\n    private _oneMouseTouchMove;\n    /**\n     * Attaches handler to HTMLAnchorElement for preventing click while carousel is being dragged\n     * @param event event object\n     */\n    private blockClickAnchorInDragging;\n    /**\n     * Handles the `touchmove` and `mousemove` events.\n     * @todo #261\n     * @param event - The event arguments.\n     */\n    private _onDragMove;\n    /**\n     * Moves .owl-stage left-right\n     * @param coordinate coordinate to be set to .owl-stage\n     */\n    private _animate;\n    /**\n       * Handles the `touchend` and `mouseup` events.\n       * @todo #261\n       * @todo Threshold for click event\n       * @param event - The event arguments.\n       */\n    private _onDragEnd;\n    /**\n       * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.\n       * @param event - The event arguments.\n       * @returns stage - object with 'x' and 'y' coordinates of .owl-stage\n       */\n    private _prepareDragging;\n    /**\n     * Attaches handler for 'click' event on any element in .owl-stage in order to prevent dragging when moving of cursor is less than 3px\n     */\n    private _oneClickHandler;\n    /**\n     * Finishes dragging\n     * @param event object event of 'mouseUp' of 'touchend' events\n     */\n    private _finishDragging;\n    /**\n       * Gets unified pointer coordinates from event.\n       * @param event The `mousedown` or `touchstart` event.\n       * @returns Contains `x` and `y` coordinates of current pointer position.\n       */\n    private _pointer;\n    /**\n       * Gets the difference of two vectors.\n       * @param first The first vector.\n       * @param second The second vector.\n       * @returns The difference.\n       */\n    private _difference;\n    /**\n       * Checks whether the carousel is in a specific state or not.\n       * @param specificState The state to check.\n       * @returns The flag which indicates if the carousel is busy.\n       */\n    private _is;\n    /**\n    * Enters a state.\n    * @param name The state name.\n    */\n    private _enter;\n    /**\n       * Sends all data needed for View.\n       */\n    private _sendChanges;\n    /**\n     * Handler for transitioend event\n     */\n    onTransitionEnd(): void;\n    /**\n       * Enters into a 'dragging' state\n       */\n    private _enterDragging;\n    /**\n     * Handles the end of 'animationend' event\n     * @param id Id of slides\n     */\n    clear(id: any): void;\n}\n"]}