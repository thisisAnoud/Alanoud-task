{"version":3,"file":"window-ref.service.d.ts","sources":["window-ref.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ClassProvider, FactoryProvider, InjectionToken } from '@angular/core';\n/**\n * Create a new injection token for injecting the window into a component.\n */\nexport declare const WINDOW: InjectionToken<unknown>;\n/**\n * Define abstract class for obtaining reference to the global window object.\n */\nexport declare abstract class WindowRef {\n    get nativeWindow(): Window | Object;\n}\n/**\n * Define class that implements the abstract class and returns the native window object.\n */\nexport declare class BrowserWindowRef extends WindowRef {\n    constructor();\n    /**\n     * @returns window object\n     */\n    get nativeWindow(): Window | Object;\n}\n/**\n * Create an factory function that returns the native window object.\n * @param browserWindowRef Native window object\n * @param platformId id of platform\n * @returns type of platform of empty object\n */\nexport declare function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object;\n/**\n * Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class.\n */\nexport declare const browserWindowProvider: ClassProvider;\n/**\n * Create an injectable provider that uses the windowFactory function for returning the native window object.\n */\nexport declare const windowProvider: FactoryProvider;\n/**\n * Create an array of providers.\n */\nexport declare const WINDOW_PROVIDERS: (ClassProvider | FactoryProvider)[];\n"]}