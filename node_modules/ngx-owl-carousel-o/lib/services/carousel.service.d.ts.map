{"version":3,"file":"carousel.service.d.ts","sources":["carousel.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { StageData } from '../models/stage-data.model';\nimport { OwlDOMData } from '../models/owlDOM-data.model';\nimport { CarouselSlideDirective } from '../carousel/carousel.module';\nimport { SlideModel } from '../models/slide.model';\nimport { Observable } from 'rxjs';\nimport { OwlOptions } from '../models/owl-options.model';\nimport { NavData, DotsData } from '../models/navigation-data.models';\nimport { OwlLogger } from './logger.service';\n/**\n * Current state information and their tags.\n */\nexport declare class States {\n    current: {};\n    tags: {\n        [key: string]: string[];\n    };\n}\n/**\n * Enumeration for types.\n * @enum {String}\n */\nexport declare enum Type {\n    Event = \"event\",\n    State = \"state\"\n}\n/**\n * Enumeration for width.\n * @enum {String}\n */\nexport declare enum Width {\n    Default = \"default\",\n    Inner = \"inner\",\n    Outer = \"outer\"\n}\n/**\n * Model for coords of .owl-stage\n */\nexport declare class Coords {\n    x: number;\n    y: number;\n}\n/**\n * Model for all current data of carousel\n */\nexport declare class CarouselCurrentData {\n    owlDOMData: OwlDOMData;\n    stageData: StageData;\n    slidesData: SlideModel[];\n    navData: NavData;\n    dotsData: DotsData;\n}\nexport declare class CarouselService {\n    private logger;\n    /**\n   * Subject for passing data needed for managing View\n   */\n    private _viewSettingsShipper$;\n    /**\n   * Subject for notification when the carousel got initializes\n   */\n    private _initializedCarousel$;\n    /**\n   * Subject for notification when the carousel's settings start changinf\n   */\n    private _changeSettingsCarousel$;\n    /**\n   * Subject for notification when the carousel's settings have changed\n   */\n    private _changedSettingsCarousel$;\n    /**\n   * Subject for notification when the carousel starts translating or moving\n   */\n    private _translateCarousel$;\n    /**\n   * Subject for notification when the carousel stopped translating or moving\n   */\n    private _translatedCarousel$;\n    /**\n   * Subject for notification when the carousel's rebuilding caused by 'resize' event starts\n   */\n    private _resizeCarousel$;\n    /**\n   * Subject for notification  when the carousel's rebuilding caused by 'resize' event is ended\n   */\n    private _resizedCarousel$;\n    /**\n   * Subject for notification when the refresh of carousel starts\n   */\n    private _refreshCarousel$;\n    /**\n   * Subject for notification when the refresh of carousel is ended\n   */\n    private _refreshedCarousel$;\n    /**\n   * Subject for notification when the dragging of carousel starts\n   */\n    private _dragCarousel$;\n    /**\n   * Subject for notification when the dragging of carousel is ended\n   */\n    private _draggedCarousel$;\n    /**\n     * Current settings for the carousel.\n     */\n    settings: OwlOptions;\n    /**\n   * Initial data for setting classes to element .owl-carousel\n   */\n    owlDOMData: OwlDOMData;\n    /**\n   * Initial data of .owl-stage\n   */\n    stageData: StageData;\n    /**\n     *  Data of every slide\n     */\n    slidesData: SlideModel[];\n    /**\n     * Data of navigation block\n     */\n    navData: NavData;\n    /**\n     * Data of dots block\n     */\n    dotsData: DotsData;\n    /**\n     * Carousel width\n     */\n    private _width;\n    /**\n     * All real items.\n     */\n    private _items;\n    /**\n   * Array with width of every slide.\n   */\n    private _widths;\n    /**\n   * Currently suppressed events to prevent them from beeing retriggered.\n   */\n    private _supress;\n    /**\n     * References to the running plugins of this carousel.\n     */\n    private _plugins;\n    /**\n   * Absolute current position.\n   */\n    private _current;\n    /**\n   * All cloned items.\n   */\n    private _clones;\n    /**\n     * Merge values of all items.\n     * @todo Maybe this could be part of a plugin.\n     */\n    private _mergers;\n    /**\n   * Animation speed in milliseconds.\n   */\n    private _speed;\n    /**\n   * Coordinates of all items in pixel.\n   * @todo The name of this member is missleading.\n   */\n    private _coordinates;\n    /**\n   * Current breakpoint.\n   * @todo Real media queries would be nice.\n   */\n    private _breakpoint;\n    /**\n     * Prefix for id of cloned slides\n     */\n    clonedIdPrefix: string;\n    /**\n     * Current options set by the caller including defaults.\n     */\n    _options: OwlOptions;\n    /**\n     * Invalidated parts within the update process.\n     */\n    private _invalidated;\n    get invalidated(): any;\n    /**\n     * Current state information and their tags.\n     */\n    private _states;\n    get states(): States;\n    /**\n     * Ordered list of workers for the update process.\n   */\n    private _pipe;\n    constructor(logger: OwlLogger);\n    /**\n     * Makes _viewSettingsShipper$ Subject become Observable\n     * @returns Observable of _viewSettingsShipper$ Subject\n     */\n    getViewCurSettings(): Observable<CarouselCurrentData>;\n    /**\n     * Makes _initializedCarousel$ Subject become Observable\n     * @returns Observable of _initializedCarousel$ Subject\n     */\n    getInitializedState(): Observable<string>;\n    /**\n     * Makes _changeSettingsCarousel$ Subject become Observable\n     * @returns Observable of _changeSettingsCarousel$ Subject\n     */\n    getChangeState(): Observable<any>;\n    /**\n     * Makes _changedSettingsCarousel$ Subject become Observable\n     * @returns Observable of _changedSettingsCarousel$ Subject\n     */\n    getChangedState(): Observable<any>;\n    /**\n     * Makes _translateCarousel$ Subject become Observable\n     * @returns Observable of _translateCarousel$ Subject\n     */\n    getTranslateState(): Observable<string>;\n    /**\n     * Makes _translatedCarousel$ Subject become Observable\n     * @returns Observable of _translatedCarousel$ Subject\n     */\n    getTranslatedState(): Observable<string>;\n    /**\n     * Makes _resizeCarousel$ Subject become Observable\n     * @returns Observable of _resizeCarousel$ Subject\n     */\n    getResizeState(): Observable<string>;\n    /**\n     * Makes _resizedCarousel$ Subject become Observable\n     * @returns Observable of _resizedCarousel$ Subject\n     */\n    getResizedState(): Observable<string>;\n    /**\n     * Makes _refreshCarousel$ Subject become Observable\n     * @returns Observable of _refreshCarousel$ Subject\n     */\n    getRefreshState(): Observable<string>;\n    /**\n     * Makes _refreshedCarousel$ Subject become Observable\n     * @returns Observable of _refreshedCarousel$ Subject\n     */\n    getRefreshedState(): Observable<string>;\n    /**\n     * Makes _dragCarousel$ Subject become Observable\n     * @returns Observable of _dragCarousel$ Subject\n     */\n    getDragState(): Observable<string>;\n    /**\n     * Makes _draggedCarousel$ Subject become Observable\n     * @returns Observable of _draggedCarousel$ Subject\n     */\n    getDraggedState(): Observable<string>;\n    /**\n     * Setups custom options expanding default options\n     * @param options custom options\n     */\n    setOptions(options: OwlOptions): void;\n    /**\n     * Checks whether user's option are set properly. Cheking is based on typings;\n     * @param options options set by user\n     * @param configOptions default options\n     * @returns checked and modified (if it's needed) user's options\n     *\n     * Notes:\n     * \t- if user set option with wrong type, it'll be written in console\n     */\n    private _validateOptions;\n    /**\n     * Checks the option `items` set by user and if it bigger than number of slides, the function returns number of slides\n     * @param items option items set by user\n     * @param skip_validateItems option `skip_validateItems` set by user\n     * @returns right number of items\n     */\n    private _validateItems;\n    /**\n     * Set current width of carousel\n     * @param width width of carousel Window\n     */\n    setCarouselWidth(width: number): void;\n    /**\n       * Setups the current settings.\n       * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\n       * @todo Support for media queries by using `matchMedia` would be nice.\n       * @param carouselWidth width of carousel\n       * @param slides array of slides\n       * @param options options set by user\n       */\n    setup(carouselWidth: number, slides: CarouselSlideDirective[], options: OwlOptions): void;\n    /**\n     * Set options for current viewport\n     */\n    setOptionsForViewport(): void;\n    /**\n     * Initializes the carousel.\n     * @param slides array of CarouselSlideDirective\n     */\n    initialize(slides: CarouselSlideDirective[]): void;\n    /**\n     * Sends all data needed for View\n     */\n    sendChanges(): void;\n    /**\n       * Updates option logic if necessery\n       */\n    private _optionsLogic;\n    /**\n     * Updates the view\n     */\n    update(): void;\n    /**\n       * Gets the width of the view.\n       * @param [dimension=Width.Default] The dimension to return\n       * @returns The width of the view in pixel.\n       */\n    width(dimension?: Width): number;\n    /**\n       * Refreshes the carousel primarily for adaptive purposes.\n       */\n    refresh(): void;\n    /**\n       * Checks window `resize` event.\n       * @param curWidth width of .owl-carousel\n       */\n    onResize(curWidth: number): boolean;\n    /**\n       * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.\n       * @todo Horizontal swipe threshold as option\n       * @todo #261\n       * @param event - The event arguments.\n       * @returns stage - object with 'x' and 'y' coordinates of .owl-stage\n       */\n    prepareDragging(event: any): Coords;\n    /**\n     * Enters into a 'dragging' state\n     */\n    enterDragging(): void;\n    /**\n       * Defines new coords for .owl-stage while dragging it\n       * @todo #261\n       * @param event the event arguments.\n       * @param dragData initial data got after starting dragging\n       * @returns coords or false\n       */\n    defineNewCoordsDrag(event: any, dragData: any): boolean | Coords;\n    /**\n       * Finishes dragging of carousel when `touchend` and `mouseup` events fire.\n       * @todo #261\n       * @todo Threshold for click event\n       * @param event the event arguments.\n       * @param dragObj the object with dragging settings and states\n       * @param clickAttacher function which attaches click handler to slide or its children elements in order to prevent event bubling\n       */\n    finishDragging(event: any, dragObj: any, clickAttacher: () => void): void;\n    /**\n       * Gets absolute position of the closest item for a coordinate.\n       * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\n       * @param coordinate The coordinate in pixel.\n       * @param direction The direction to check for the closest item. Ether `left` or `right`.\n       * @returns The absolute position of the closest item.\n       */\n    closest(coordinate: number, direction: string): number;\n    /**\n       * Animates the stage.\n       * @todo #270\n       * @param coordinate The coordinate in pixels.\n       */\n    animate(coordinate: number | number[]): void;\n    /**\n       * Checks whether the carousel is in a specific state or not.\n       * @param state The state to check.\n       * @returns The flag which indicates if the carousel is busy.\n       */\n    is(state: string): boolean;\n    /**\n       * Sets the absolute position of the current item.\n       * @param position The new absolute position or nothing to leave it unchanged.\n       * @returns The absolute position of the current item.\n       */\n    current(position?: number): number;\n    /**\n       * Invalidates the given part of the update routine.\n       * @param part The part to invalidate.\n       * @returns The invalidated parts.\n       */\n    invalidate(part: string): string[];\n    /**\n     * Resets the absolute position of the current item.\n     * @param position the absolute position of the new item.\n     */\n    reset(position: number): void;\n    /**\n       * Normalizes an absolute or a relative position of an item.\n       * @param position The absolute or relative position to normalize.\n       * @param relative Whether the given position is relative or not.\n       * @returns The normalized position.\n       */\n    normalize(position: number, relative?: boolean): number;\n    /**\n       * Converts an absolute position of an item into a relative one.\n       * @param position The absolute position to convert.\n       * @returns The converted position.\n       */\n    relative(position: number): number;\n    /**\n       * Gets the maximum position for the current item.\n       * @param relative Whether to return an absolute position or a relative position.\n       * @returns number of maximum position\n       */\n    maximum(relative?: boolean): number;\n    /**\n       * Gets the minimum position for the current item.\n       * @param relative Whether to return an absolute position or a relative position.\n       * @returns number of minimum position\n       */\n    minimum(relative?: boolean): number;\n    /**\n       * Gets an item at the specified relative position.\n       * @param position The relative position of the item.\n       * @returns The item at the given position or all items if no position was given.\n       */\n    items(position?: number): CarouselSlideDirective[];\n    /**\n       * Gets an item at the specified relative position.\n       * @param position The relative position of the item.\n       * @returns The item at the given position or all items if no position was given.\n       */\n    mergers(position: number): number | number[];\n    /**\n       * Gets the absolute positions of clones for an item.\n       * @param position The relative position of the item.\n       * @returns The absolute positions of clones for the item or all if no position was given.\n       */\n    clones(position?: number): number[];\n    /**\n       * Sets the current animation speed.\n       * @param speed The animation speed in milliseconds or nothing to leave it unchanged.\n       * @returns The current animation speed in milliseconds.\n       */\n    speed(speed?: number): number;\n    /**\n       * Gets the coordinate of an item.\n       * @todo The name of this method is missleanding.\n       * @param position The absolute position of the item within `minimum()` and `maximum()`.\n       * @returns The coordinate of the item in pixel or all coordinates.\n       */\n    coordinates(position?: number): number | number[];\n    /**\n       * Calculates the speed for a translation.\n       * @param from The absolute position of the start item.\n       * @param to The absolute position of the target item.\n       * @param factor [factor=undefined] - The time factor in milliseconds.\n       * @returns The time in milliseconds for the translation.\n       */\n    private _duration;\n    /**\n       * Slides to the specified item.\n       * @param position The position of the item.\n       * @param speed The time in milliseconds for the transition.\n       */\n    to(position: number, speed: number | boolean): void;\n    /**\n       * Slides to the next item.\n       * @param speed The time in milliseconds for the transition.\n       */\n    next(speed: number | boolean): void;\n    /**\n       * Slides to the previous item.\n       * @param speed The time in milliseconds for the transition.\n       */\n    prev(speed: number | boolean): void;\n    /**\n       * Handles the end of an animation.\n       * @param event - The event arguments.\n       */\n    onTransitionEnd(event?: any): boolean;\n    /**\n       * Gets viewport width.\n       * @returns - The width in pixel.\n       */\n    private _viewport;\n    /**\n       * Sets _items\n       * @param content The list of slides put into CarouselSlideDirectives.\n       */\n    setItems(content: CarouselSlideDirective[]): void;\n    /**\n     * Sets slidesData using this._items\n     */\n    private _defineSlidesData;\n    /**\n     * Sets current classes for slide\n     * @param slide Slide of carousel\n     * @returns object with names of css-classes which are keys and true/false values\n     */\n    setCurSlideClasses(slide: SlideModel): {\n        [key: string]: boolean;\n    };\n    /**\n       * Operators to calculate right-to-left and left-to-right.\n       * @param a - The left side operand.\n       * @param o - The operator.\n       * @param b - The right side operand.\n       * @returns true/false meaning right-to-left or left-to-right\n       */\n    private _op;\n    /**\n       * Triggers a public event.\n       * @todo Remove `status`, `relatedTarget` should be used instead.\n       * @param name The event name.\n       * @param data The event data.\n       * @param namespace The event namespace.\n       * @param state The state which is associated with the event.\n       * @param enter Indicates if the call enters the specified state or not.\n       */\n    private _trigger;\n    /**\n     * Enters a state.\n     * @param name - The state name.\n     */\n    enter(name: string): void;\n    /**\n       * Leaves a state.\n       * @param name - The state name.\n       */\n    leave(name: string): void;\n    /**\n       * Registers an event or state.\n       * @param object - The event or state to register.\n       */\n    register(object: any): void;\n    /**\n       * Suppresses events.\n       * @param events The events to suppress.\n       */\n    private _suppress;\n    /**\n       * Releases suppressed events.\n       * @param events The events to release.\n       */\n    private _release;\n    /**\n       * Gets unified pointer coordinates from event.\n       * @todo #261\n       * @param event The `mousedown` or `touchstart` event.\n       * @returns Object Coords which contains `x` and `y` coordinates of current pointer position.\n       */\n    pointer(event: any): Coords;\n    /**\n       * Determines if the input is a Number or something that can be coerced to a Number\n       * @param number The input to be tested\n       * @returns An indication if the input is a Number or can be coerced to a Number\n       */\n    private _isNumeric;\n    /**\n     * Determines whether value is number or boolean type\n     * @param value The input to be tested\n     * @returns An indication if the input is a Number or can be coerced to a Number, or Boolean\n     */\n    private _isNumberOrBoolean;\n    /**\n     * Determines whether value is number or string type\n     * @param value The input to be tested\n     * @returns An indication if the input is a Number or can be coerced to a Number, or String\n     */\n    private _isNumberOrString;\n    /**\n     * Determines whether value is number or string type\n     * @param value The input to be tested\n     * @returns An indication if the input is a Number or can be coerced to a Number, or String\n     */\n    private _isStringOrBoolean;\n    /**\n       * Gets the difference of two vectors.\n       * @todo #261\n       * @param first The first vector.\n       * @param second The second vector.\n       * @returns The difference.\n       */\n    difference(first: Coords, second: Coords): Coords;\n}\n"]}