{"version":3,"file":"autoplay.service.d.ts","sources":["autoplay.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, NgZone } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { CarouselService } from './carousel.service';\nexport declare class AutoplayService implements OnDestroy {\n    private carouselService;\n    private ngZone;\n    /**\n     * Subscrioption to merge Observables from CarouselService\n     */\n    autoplaySubscription: Subscription;\n    /**\n     * The autoplay timeout.\n     */\n    private _timeout;\n    /**\n     * Indicates whenever the autoplay is paused.\n     */\n    private _paused;\n    /**\n     * Shows whether the code (the plugin) changed the option 'AutoplayTimeout' for own needs\n     */\n    private _isArtificialAutoplayTimeout;\n    /**\n     * Shows whether the autoplay is paused for unlimited time by the developer.\n     * Use to prevent autoplaying in case of firing `mouseleave` by adding layers to `<body>` like `mat-menu` does\n     */\n    private _isAutoplayStopped;\n    get isAutoplayStopped(): boolean;\n    set isAutoplayStopped(value: boolean);\n    private winRef;\n    private docRef;\n    constructor(carouselService: CarouselService, winRef: any, docRef: any, ngZone: NgZone);\n    ngOnDestroy(): void;\n    /**\n     * Defines Observables which service must observe\n     */\n    spyDataStreams(): void;\n    /**\n       * Starts the autoplay.\n       * @param timeout The interval before the next animation starts.\n       * @param speed The animation speed for the animations.\n       */\n    play(timeout?: number, speed?: number): void;\n    /**\n       * Gets a new timeout\n       * @param timeout - The interval before the next animation starts.\n       * @param speed - The animation speed for the animations.\n       * @return\n       */\n    private _getNextTimeout;\n    /**\n       * Sets autoplay in motion.\n       */\n    private _setAutoPlayInterval;\n    /**\n     * Stops the autoplay.\n     */\n    stop(): void;\n    /**\n       * Stops the autoplay.\n       */\n    pause(): void;\n    /**\n     * Manages by autoplaying according to data passed by _changedSettingsCarousel$ Obsarvable\n     * @param data object with current position of carousel and type of change\n     */\n    private _handleChangeObservable;\n    /**\n     * Starts autoplaying of the carousel in the case when user leaves the carousel before it starts translateing (moving)\n     */\n    private _playAfterTranslated;\n    /**\n     * Starts pausing\n     */\n    startPausing(): void;\n    /**\n     * Starts playing after mouse leaves carousel\n     */\n    startPlayingMouseLeave(): void;\n    /**\n     * Starts playing after touch ends\n     */\n    startPlayingTouchEnd(): void;\n}\n"]}