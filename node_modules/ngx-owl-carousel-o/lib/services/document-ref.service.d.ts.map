{"version":3,"file":"document-ref.service.d.ts","sources":["document-ref.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ClassProvider, FactoryProvider, InjectionToken } from '@angular/core';\n/**\n * Create a new injection token for injecting the Document into a component.\n */\nexport declare const DOCUMENT: InjectionToken<Document>;\n/**\n * Define abstract class for obtaining reference to the global Document object.\n */\nexport declare abstract class DocumentRef {\n    get nativeDocument(): Document | Object;\n}\n/**\n * Define class that implements the abstract class and returns the native Document object.\n */\nexport declare class BrowserDocumentRef extends DocumentRef {\n    constructor();\n    /**\n     * @returns Document object\n     */\n    get nativeDocument(): Document | Object;\n}\n/**\n * Create an factory function that returns the native Document object.\n * @param browserDocumentRef Native Document object\n * @param platformId id of platform\n * @returns type of platform of empty object\n */\nexport declare function documentFactory(browserDocumentRef: BrowserDocumentRef, platformId: Object): Document | Object;\n/**\n * Create a injectable provider for the DocumentRef token that uses the BrowserDocumentRef class.\n */\nexport declare const browserDocumentProvider: ClassProvider;\n/**\n * Create an injectable provider that uses the DocumentFactory function for returning the native Document object.\n */\nexport declare const documentProvider: FactoryProvider;\n/**\n * Create an array of providers.\n */\nexport declare const DOCUMENT_PROVIDERS: (ClassProvider | FactoryProvider)[];\n"]}