{"version":3,"file":"navigation.service.d.ts","sources":["navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { NavData, DotsData } from '../models/navigation-data.models';\nimport { CarouselService } from './carousel.service';\nimport { Subscription } from 'rxjs';\nexport declare class NavigationService implements OnDestroy {\n    private carouselService;\n    /**\n     * Subscrioption to merge Observable  from CarouselService\n     */\n    navSubscription: Subscription;\n    /**\n     * Indicates whether the plugin is initialized or not.\n     */\n    protected _initialized: boolean;\n    /**\n     * The current paging indexes.\n     */\n    protected _pages: any[];\n    /**\n     * Data for navigation elements of the user interface.\n     */\n    protected _navData: NavData;\n    /**\n     * Data for dot elements of the user interface.\n     */\n    protected _dotsData: DotsData;\n    constructor(carouselService: CarouselService);\n    ngOnDestroy(): void;\n    /**\n     * Defines Observables which service must observe\n     */\n    spyDataStreams(): void;\n    /**\n       * Initializes the layout of the plugin and extends the carousel.\n       */\n    initialize(): void;\n    /**\n     * Calculates internal states and updates prop _pages\n     */\n    private _updateNavPages;\n    /**\n       * Draws the user interface.\n       * @todo The option `dotsData` wont work.\n       */\n    draw(): void;\n    /**\n     * Updates navigation buttons's and dots's states\n     */\n    update(): void;\n    /**\n     * Changes state of nav buttons (disabled, enabled)\n     */\n    private _updateNavButtons;\n    /**\n     * Changes active dot if page becomes changed\n     */\n    private _updateDots;\n    /**\n       * Gets the current page position of the carousel.\n       * @returns the current page position of the carousel\n       */\n    private _current;\n    /**\n       * Gets the current succesor/predecessor position.\n     * @param sussessor position of slide\n       * @returns the current succesor/predecessor position\n       */\n    private _getPosition;\n    /**\n       * Slides to the next item or page.\n       * @param speed The time in milliseconds for the transition.\n       */\n    next(speed: number | boolean): void;\n    /**\n     * Slides to the previous item or page.\n     * @param speed The time in milliseconds for the transition.\n     */\n    prev(speed: number | boolean): void;\n    /**\n     * Slides to the specified item or page.\n     * @param position - The position of the item or page.\n     * @param speed - The time in milliseconds for the transition.\n     * @param standard - Whether to use the standard behaviour or not. Default meaning false\n     */\n    to(position: number, speed: number | boolean, standard?: boolean): void;\n    /**\n     * Moves carousel after user's clicking on any dots\n     */\n    moveByDot(dotId: string): void;\n    /**\n     * rewinds carousel to slide with needed id\n     * @param id id of slide\n     */\n    toSlideById(id: string): void;\n}\n"]}